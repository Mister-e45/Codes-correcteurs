R.<X>=PolynomialRing(GF(2))
F.<x>=GF(2^4,modulus=X^4+X^3+1)

x.multiplicative_order()

M1=x.minimal_polynomial()
print(M1)

M2=(x^2).minimal_polynomial()
print(M2)

M3=(x^3).minimal_polynomial()
print(M3)

M4=(x^4).minimal_polynomial()
print(M4)

g=lcm([M1(X),M2(X),M3(X),M4(X)])
print(g)

y=X^12+X^11+X^8+X^7+X^6+X^5+X^4+1

Si=[]
S1=y(x)
S2=y(x^2)
S3=y(x^3)
S4=y(x^4)
Si.append(S1)
Si.append(S2)
Si.append(S3)
Si.append(S4)


A.<z>=PolynomialRing(F)
S=A(0)
for i in range(4):
    S+=Si[i]*z^i
print(S)

u,v,r=euclide_etendu_partiel(z^4,S,2)
print(u)
print(v)
print("sigma",r)

sigma=v(z)//v(0)
w=r(z)//v(0)

print("sigma:",sigma)
print(w)

racines=r.roots(multiplicities=False)
print(racines)
print(racines[0].log(x))
print(racines[1].log(x))


e=X^8+X^9

print((y+e)//g)


l=P.list()
M=MatrixSpace(GF(2),15-8,15)
G=M(0)
for i in range(15-8):
    for j in range(8):
        G[i,i+j]=l[j]
        
print(G)


print(decode_BCH(X^12+X^11+X^8+X^7+X^6+X^5+X^4+1,X^8 + X^4 + X^2 + X + 1,x,2))


R.<x> = PolynomialRing(GF(2))
F.<alpha> = GF(2^10,modulus=x^10 + x^6 + x^5 + x^3 + x^2 + x + 1)

y=x^1011 + x^997 + x^962 + x^938 + x^899 + x^854 + x^829 + x^823 + x^808 + x^806 + x^805 + x^804 + x^803 + x^802 + x^799 + x^798 + x^797 + x^795 + x^790 + x^788 + x^784 + x^783 + x^781 + x^780 + x^777 + x^775 + x^773 + x^771 + x^769 + x^768 + x^766 + x^765 + x^764 + x^763 + x^760 + x^757 + x^756 + x^755 + x^754 + x^752 + x^750 + x^749 + x^748 + x^747 + x^742 + x^741 + x^735 + x^733 + x^731 + x^730 + x^729 + x^727 + x^723 + x^718 + x^714 + x^713 + x^712 + x^709 + x^708 + x^705 + x^700 + x^699 + x^698 + x^697 + x^696 + x^695 + x^693 + x^692 + x^691 + x^689 + x^688 + x^686 + x^685 + x^684 + x^683 + x^681 + x^677 + x^676 + x^674 + x^673 + x^672 + x^669 + x^668 + x^667 + x^661 + x^659 + x^657 + x^654 + x^653 + x^652 + x^650 + x^649 + x^646 + x^643 + x^641 + x^640 + x^639 + x^632 + x^627 + x^625 + x^622 + x^620 + x^619 + x^618 + x^614 + x^612 + x^611 + x^610 + x^607 + x^605 + x^601 + x^598 + x^597 + x^596 + x^593 + x^592 + x^590 + x^587 + x^581 + x^580 + x^579 + x^578 + x^575 + x^574 + x^573 + x^570 + x^569 + x^567 + x^564 + x^563 + x^562 + x^559 + x^558 + x^553 + x^550 + x^549 + x^548 + x^545 + x^544 + x^543 + x^542 + x^541 + x^539 + x^538 + x^533 + x^532 + x^531 + x^530 + x^527 + x^523 + x^520 + x^518 + x^517 + x^516 + x^513 + x^512 + x^511 + x^510 + x^507 + x^503 + x^501 + x^500 + x^499 + x^497 + x^496 + x^494 + x^490 + x^489 + x^487 + x^485 + x^484 + x^482 + x^480 + x^479 + x^477 + x^473 + x^472 + x^464 + x^463 + x^462 + x^461 + x^460 + x^458 + x^456 + x^450 + x^449 + x^447 + x^446 + x^445 + x^443 + x^442 + x^440 + x^439 + x^438 + x^437 + x^428 + x^427 + x^425 + x^424 + x^423 + x^421 + x^419 + x^417 + x^414 + x^413 + x^411 + x^410 + x^409 + x^407 + x^406 + x^404 + x^402 + x^400 + x^399 + x^398 + x^397 + x^395 + x^393 + x^392 + x^391 + x^390 + x^389 + x^388 + x^387 + x^385 + x^384 + x^383 + x^381 + x^380 + x^379 + x^375 + x^373 + x^370 + x^369 + x^366 + x^365 + x^363 + x^357 + x^352 + x^351 + x^350 + x^348 + x^347 + x^346 + x^339 + x^338 + x^328 + x^327 + x^326 + x^325 + x^321 + x^320 + x^317 + x^313 + x^312 + x^308 + x^307 + x^305 + x^303 + x^301 + x^300 + x^299 + x^297 + x^296 + x^291 + x^289 + x^287 + x^286 + x^283 + x^279 + x^278 + x^277 + x^275 + x^271 + x^269 + x^267 + x^263 + x^252 + x^251 + x^246 + x^245 + x^243 + x^242 + x^238 + x^235 + x^230 + x^229 + x^227 + x^226 + x^225 + x^223 + x^220 + x^213 + x^211 + x^207 + x^198 + x^195 + x^194 + x^192 + x^190 + x^189 + x^188 + x^187 + x^186 + x^183 + x^181 + x^179 + x^175 + x^173 + x^171 + x^169 + x^164 + x^163 + x^162 + x^161 + x^158 + x^155 + x^154 + x^152 + x^147 + x^143 + x^142 + x^138 + x^135 + x^134 + x^132 + x^129 + x^127 + x^125 + x^123 + x^122 + x^121 + x^120 + x^116 + x^111 + x^107 + x^103 + x^102 + x^101 + x^99 + x^97 + x^96 + x^92 + x^88 + x^86 + x^85 + x^83 + x^80 + x^75 + x^74 + x^73 + x^72 + x^71 + x^70 + x^67 + x^66 + x^65 + x^62 + x^60 + x^59 + x^57 + x^55 + x^50 + x^47 + x^45 + x^42 + x^41 + x^40 + x^39 + x^36 + x^33 + x^32 + x^31 + x^30 + x^28 + x^27 + x^26 + x^24 + x^22 + x^21 + x^19 + x^17 + x^14 + x^12 + x^8 + x^6 + x^4
g=x^450 + x^446 + x^445 + x^443 + x^442 + x^438 + x^437 + x^435 + x^434 + x^432 + x^431 + x^430 + x^429 + x^428 + x^427 + x^425 + x^423 + x^421 + x^417 + x^416 + x^415 + x^414 + x^413 + x^412 + x^411 + x^409 + x^407 + x^406 + x^405 + x^403 + x^398 + x^397 + x^395 + x^394 + x^393 + x^391 + x^385 + x^383 + x^381 + x^377 + x^376 + x^374 + x^373 + x^372 + x^371 + x^370 + x^367 + x^363 + x^361 + x^359 + x^358 + x^354 + x^353 + x^347 + x^346 + x^345 + x^342 + x^340 + x^338 + x^337 + x^334 + x^331 + x^330 + x^326 + x^325 + x^324 + x^322 + x^318 + x^312 + x^309 + x^305 + x^301 + x^300 + x^299 + x^296 + x^293 + x^292 + x^290 + x^288 + x^282 + x^281 + x^277 + x^276 + x^271 + x^270 + x^269 + x^266 + x^265 + x^263 + x^261 + x^260 + x^258 + x^255 + x^251 + x^249 + x^248 + x^247 + x^246 + x^245 + x^242 + x^241 + x^240 + x^238 + x^236 + x^234 + x^231 + x^230 + x^229 + x^225 + x^224 + x^223 + x^221 + x^220 + x^219 + x^216 + x^215 + x^214 + x^212 + x^206 + x^205 + x^203 + x^200 + x^199 + x^198 + x^196 + x^193 + x^189 + x^188 + x^185 + x^183 + x^181 + x^180 + x^179 + x^178 + x^177 + x^176 + x^175 + x^172 + x^168 + x^167 + x^166 + x^165 + x^164 + x^161 + x^160 + x^158 + x^157 + x^154 + x^153 + x^150 + x^149 + x^148 + x^147 + x^144 + x^143 + x^142 + x^141 + x^133 + x^132 + x^129 + x^128 + x^126 + x^125 + x^120 + x^118 + x^116 + x^115 + x^112 + x^110 + x^109 + x^108 + x^102 + x^101 + x^97 + x^94 + x^93 + x^90 + x^89 + x^87 + x^86 + x^85 + x^83 + x^81 + x^79 + x^78 + x^76 + x^75 + x^74 + x^73 + x^71 + x^70 + x^67 + x^66 + x^65 + x^63 + x^61 + x^60 + x^58 + x^55 + x^51 + x^50 + x^48 + x^46 + x^45 + x^43 + x^42 + x^40 + x^34 + x^32 + x^31 + x^28 + x^25 + x^24 + x^21 + x^17 + x^16 + x^15 + x^14 + x^12 + x^9 + x^7 + x^6 + 1

m=decode_BCH(y,g,alpha,50)

print(m)

mm=ZZ([ZZ(u) for u in m.coefficients(sparse=False)],2).digits(200)
l=chr(mm[0])
for i in [1..len(mm)-1]:
        l = l + chr(mm[i])
        
print(l)


